@import "variables";


// Mixins for flexbox layout
@mixin myflexbox($extend: true) {
  @if $extend {
    @extend %myflexbox;
  }
  @else {
    display: -ms-flex;
    display: -webkit-flex;
    display: flex;
  }
}

%myflexbox {
  @include myflexbox($extend: false);
}

@mixin myflex-justify-content($value) {
  -ms-justify-content: $value;
  -moz-justify-content: $value;
  -webkit-justify-content: $value;
  justify-content: $value;
}

// ========

// Mixins for font
@mixin font-kerning() {
  -webkit-font-kerning: normal;
  -moz-font-kerning: normal;
  font-kerning: normal;
}

@mixin font-feature-settings() {
  -webkit-font-feature-settings: "liga";
  -moz-font-feature-settings: "liga", "kern";
  font-feature-settings: "liga", "kern";
}

@mixin font-smoothing() {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin text-adjust() {
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
}
// ========

@mixin calc($property, $expression) {
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

@mixin gradient($deg-prefix, $deg, $arguments...) {
  background: -webkit-linear-gradient($deg-prefix, $arguments);
  background: -o-linear-gradient($deg-prefix, $arguments);
  background: -ms-linear-gradient($deg-prefix, $arguments);
  background: linear-gradient($deg, $arguments);
}

// loops through all arguments and prefixes the ones that need it (in this case only transform)
@function vendor-args($arg, $vendor) {
    $result: ();
    @each $i in $arg {
      @if $i == transform { $result: append($result, #{$vendor}$i); }
      @else { $result: append($result, $i); }
    }
  @return $result;
}

// general vendor mixin
@mixin vendor($property, $args...){
  @each $vendor in ('-webkit-', '-moz-', '-ms-', '-o-', '') {
    $type: null;
    @each $arg in nth($args,1) {
      $type: ($type, vendor-args($arg, $vendor));
    }
    #{$vendor}#{$property}: $type;
  }
}

// general transition mixin
@mixin transition($args...) {
  @include vendor(transition, $args);
}

@mixin transform($values...) {
  -ms-transform: $values;
  -webkit-transform: $values;
  transform: $values;
}

// Mixins for media queries
@mixin mq-min($width) {
  @media screen and (min-width: $width + 1px) {
    @content;
  }
}

@mixin mq-max($width) {
  @media screen and (max-width: $width * 1px) {
    @content;
  }
}

@mixin mq-min-max($min-width, $max-width) {
  @media screen and (min-width: $min-width) and (max-width: $max-width) {
    @content;
  }
}
// ========